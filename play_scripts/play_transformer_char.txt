Model: "functional"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓
┃ Layer (type)                         ┃ Output Shape                ┃         Param # ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩
│ input_layer (InputLayer)             │ (None, 50)                  │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ token_and_position_embedding         │ (None, 50, 128)             │           8,576 │
│ (TokenAndPositionEmbedding)          │                             │                 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ transformer_encoder                  │ (None, 50, 128)             │         198,272 │
│ (TransformerEncoder)                 │                             │                 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ get_item (GetItem)                   │ (None, 6, 128)              │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ dense (Dense)                        │ (None, 6, 256)              │          33,024 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ dense_1 (Dense)                      │ (None, 6, 17)               │           4,369 │
└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘
 Total params: 244,241 (954.07 KB)
 Trainable params: 244,241 (954.07 KB)
 Non-trainable params: 0 (0.00 B)
Epoch 1/100
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
I0000 00:00:1724782406.172195   65844 service.cc:146] XLA service 0x7fca44016b90 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:
I0000 00:00:1724782406.172254   65844 service.cc:154]   StreamExecutor device (0): NVIDIA GeForce RTX 2070 SUPER, Compute Capability 7.5
2024-08-27 18:13:26.241481: I tensorflow/compiler/mlir/tensorflow/utils/dump_mlir_util.cc:268] disabling MLIR crash reproducer, set env var `MLIR_CRASH_REPRODUCER_DIRECTORY` to enable.
2024-08-27 18:13:26.513119: I external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:531] Loaded cuDNN version 8906
2024-08-27 18:13:30.363989: I external/local_xla/xla/stream_executor/cuda/cuda_asm_compiler.cc:393] ptxas warning : Registers are spilled to local memory in function 'input_slice_fusion_1', 4 bytes spill stores, 4 bytes spill loads

I0000 00:00:1724782410.393707   65844 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.
113/129 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.7997 - loss: 0.87182024-08-27 18:13:34.613889: I external/local_xla/xla/stream_executor/cuda/cuda_asm_compiler.cc:393] ptxas warning : Registers are spilled to local memory in function 'input_slice_fusion_1', 4 bytes spill stores, 4 bytes spill loads

129/129 ━━━━━━━━━━━━━━━━━━━━ 13s 49ms/step - accuracy: 0.8060 - loss: 0.8461 - val_accuracy: 0.8510 - val_loss: 0.6251
Epoch 2/100
129/129 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - accuracy: 0.8601 - loss: 0.5984 - val_accuracy: 0.8554 - val_loss: 0.6216
Epoch 3/100
129/129 ━━━━━━━━━━━━━━━━━━━━ 1s 4ms/step - accuracy: 0.8585 - loss: 0.6154 - val_accuracy: 0.8539 - val_loss: 0.6257
Epoch 4/100
129/129 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.8553 - loss: 0.6110 - val_accuracy: 0.8585 - val_loss: 0.6207
Epoch 5/100
129/129 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.8707 - loss: 0.5625 - val_accuracy: 0.8593 - val_loss: 0.6186
Epoch 6/100
129/129 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.8679 - loss: 0.5591 - val_accuracy: 0.8602 - val_loss: 0.5937
Epoch 7/100
129/129 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - accuracy: 0.8737 - loss: 0.5319 - val_accuracy: 0.8641 - val_loss: 0.5883
Epoch 8/100
129/129 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - accuracy: 0.8764 - loss: 0.5107 - val_accuracy: 0.8609 - val_loss: 0.5754
Epoch 9/100
129/129 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - accuracy: 0.8735 - loss: 0.5194 - val_accuracy: 0.8641 - val_loss: 0.5997
Epoch 10/100
129/129 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - accuracy: 0.8771 - loss: 0.5054 - val_accuracy: 0.8607 - val_loss: 0.5985
Epoch 11/100
129/129 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.8643 - loss: 0.5450 - val_accuracy: 0.8635 - val_loss: 0.5917
Epoch 12/100
129/129 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - accuracy: 0.8709 - loss: 0.5200 - val_accuracy: 0.8604 - val_loss: 0.5821
Epoch 13/100
129/129 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.8719 - loss: 0.5026 - val_accuracy: 0.8591 - val_loss: 0.5818
69/69 ━━━━━━━━━━━━━━━━━━━━ 1s 15ms/step - accuracy: 0.8666 - loss: 0.5558
Per-character Test Accuracy: 86.79%
Predicting on a five example
Input: [ 3  5  7  9  5  2  3  5  7  9  5  2  8 13  3  4  6  4 10  2  3  4  6  4
 10  2  3  4  6  4 10  2  3  4  6  4 10  2  3  4  6  4 10  2  3  4  6  4
 10  2]
Input text: ['7 0 6 1 0 orderline 7 0 6 1 0 orderline 4 sysdatatypes 7 8 9 8 5 orderline 7 8 9 8 5 orderline 7 8 9 8 5 orderline 7 8 9 8 5 orderline 7 8 9 8 5 orderline 7 8 9 8 5 orderline']
Expected output text: ['7 8 6 5 9 orderline']
1/1 ━━━━━━━━━━━━━━━━━━━━ 1s 695ms/step
Predicted output: [[3 4 6 4 9 2]]
Predicted output text: ['7 8 9 8 5 orderline']
Input: [ 3  4  4  4  6  2  3  4  4  4  6  2  8 13  4  5 12 12  8  2  4  5 12 12
  8  2  4  5 12 12  8  2  4  5 12 12  8  2  4  5 12 12  8  2  4  5 12 12
  8  2]
Input text: ['7 8 8 8 9 orderline 7 8 8 8 9 orderline 4 sysdatatypes 8 0 2 2 4 orderline 8 0 2 2 4 orderline 8 0 2 2 4 orderline 8 0 2 2 4 orderline 8 0 2 2 4 orderline 8 0 2 2 4 orderline']
Expected output text: ['8 0 2 2 4 orderline']
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 13ms/step
Predicted output: [[ 4  5 12 12  8  2]]
Predicted output text: ['8 0 2 2 4 orderline']
Input: [10  2  3  4  6 10 10  2  3  4  6 10 10  2  3  4  6 10 10  2  3  4  6 10
 10  2  3  4  6 10 10  2  3  4  6 10 10  2  3  4  6 10 10  2  3  4  6 10
 10  2]
Input text: ['5 orderline 7 8 9 5 5 orderline 7 8 9 5 5 orderline 7 8 9 5 5 orderline 7 8 9 5 5 orderline 7 8 9 5 5 orderline 7 8 9 5 5 orderline 7 8 9 5 5 orderline 7 8 9 5 5 orderline']
Expected output text: ['7 8 9 5 5 orderline']
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 13ms/step
Predicted output: [[3 4 6 9 9 2]]
Predicted output text: ['7 8 9 5 5 orderline']
Input: [ 4  9 12 12 10  2  4  9 12 12 10  2  4  9 12 12 10  2  4  9 12 12 10  2
  8 13  3  4  6 10 10  2  3  4  6 10 10  2  3  4  6 10 10  2  3  4  6 10
 10  2]
Input text: ['8 1 2 2 5 orderline 8 1 2 2 5 orderline 8 1 2 2 5 orderline 8 1 2 2 5 orderline 4 sysdatatypes 7 8 9 5 5 orderline 7 8 9 5 5 orderline 7 8 9 5 5 orderline 7 8 9 5 5 orderline']
Expected output text: ['7 8 9 5 5 orderline']
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 14ms/step
Predicted output: [[3 4 6 9 9 2]]
Predicted output text: ['7 8 9 5 5 orderline']
Input: [12  2  3  4  4  9  9  2  3  4  4  9  9  2  3  4  4  9  9  2  3  4  4  9
  9  2  3  4  4  9  9  2  3  4  4  9  9  2  3  4  4  9  9  2  3  8 10 11
 11  2]
Input text: ['2 orderline 7 8 8 1 1 orderline 7 8 8 1 1 orderline 7 8 8 1 1 orderline 7 8 8 1 1 orderline 7 8 8 1 1 orderline 7 8 8 1 1 orderline 7 8 8 1 1 orderline 7 4 5 3 3 orderline']
Expected output text: ['7 4 5 3 3 orderline']
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 14ms/step
Predicted output: [[ 3  8  9 11 11  2]]
Predicted output text: ['7 4 5 3 3 orderline']
Input: [7 2 3 9 6 7 7 2 3 9 6 7 7 2 3 9 6 7 7 2 3 9 6 7 7 2 3 9 6 7 7 2 3 9 6 7 7
 2 3 9 6 7 7 2 3 9 6 7 7 2]
Input text: ['6 orderline 7 1 9 6 6 orderline 7 1 9 6 6 orderline 7 1 9 6 6 orderline 7 1 9 6 6 orderline 7 1 9 6 6 orderline 7 1 9 6 6 orderline 7 1 9 6 6 orderline 7 1 9 6 6 orderline']
Expected output text: ['7 1 9 6 6 orderline']
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 14ms/step
Predicted output: [[ 3 10  6  7  7  2]]
Predicted output text: ['7 1 9 6 6 orderline']
Input: [ 7  2  3  3  6  7 10  2  3  3  6  7 10  2  3 10  6 12  5  2  3 10  6 12
  5  2  3 10  6 12  5  2  3 10  6 12  5  2  3 10  6 12  5  2  3 10  6 12
  5  2]
Input text: ['6 orderline 7 7 9 6 5 orderline 7 7 9 6 5 orderline 7 5 9 2 0 orderline 7 5 9 2 0 orderline 7 5 9 2 0 orderline 7 5 9 2 0 orderline 7 5 9 2 0 orderline 7 5 9 2 0 orderline']
Expected output text: ['7 5 9 2 0 orderline']
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 15ms/step
Predicted output: [[ 3  9  6 12  5  2]]
Predicted output text: ['7 5 9 2 0 orderline']
Input: [ 7  2  4  9 12  5  7  2  3 10  5 10 11  2  3 10  5 10 11  2  3 10  5 10
 11  2  3 10  5 10 11  2  3 10  5 10 11  2  3 10  5 10 11  2  3 10  5 10
 11  2]
Input text: ['6 orderline 8 1 2 0 6 orderline 7 5 0 5 3 orderline 7 5 0 5 3 orderline 7 5 0 5 3 orderline 7 5 0 5 3 orderline 7 5 0 5 3 orderline 7 5 0 5 3 orderline 7 5 0 5 3 orderline']
Expected output text: ['7 5 0 5 3 orderline']
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 16ms/step
Predicted output: [[ 3  9  5  9 11  2]]
Predicted output text: ['7 5 0 5 3 orderline']
Input: [ 9  2  4  5 11  7  9  2  4  5 11  7  9  2  4  5 11  7  9  2  4  5 11  7
  9  2  4  5 11  7  9  2  4  5 11  7  9  2  4  5 11  7  9  2  3  7  9 12
  8  2]
Input text: ['1 orderline 8 0 3 6 1 orderline 8 0 3 6 1 orderline 8 0 3 6 1 orderline 8 0 3 6 1 orderline 8 0 3 6 1 orderline 8 0 3 6 1 orderline 8 0 3 6 1 orderline 7 6 1 2 4 orderline']
Expected output text: ['7 6 1 2 4 orderline']
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 15ms/step
Predicted output: [[ 3  7 10 12  8  2]]
Predicted output text: ['7 6 1 2 4 orderline']
Input: [8 2 4 5 7 5 8 2 4 5 7 5 8 2 4 5 7 5 8 2 4 5 7 5 8 2 4 5 7 5 8 2 4 5 7 5 8
 2 4 5 7 5 8 2 4 5 7 5 8 2]
Input text: ['4 orderline 8 0 6 0 4 orderline 8 0 6 0 4 orderline 8 0 6 0 4 orderline 8 0 6 0 4 orderline 8 0 6 0 4 orderline 8 0 6 0 4 orderline 8 0 6 0 4 orderline 8 0 6 0 4 orderline']
Expected output text: ['8 0 6 0 4 orderline']
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 13ms/step
Predicted output: [[4 5 7 5 8 2]]
Predicted output text: ['8 0 6 0 4 orderline']
Input: [11  2  3  3 12 10 11  2  3  3 12 10 11  2  3  3 12 10 11  2  3  3 12 10
 11  2  3  3 12 10 11  2  3  3 12 10 11  2  3  3 12 10 11  2  3  3 12 10
 11  2]
Input text: ['3 orderline 7 7 2 5 3 orderline 7 7 2 5 3 orderline 7 7 2 5 3 orderline 7 7 2 5 3 orderline 7 7 2 5 3 orderline 7 7 2 5 3 orderline 7 7 2 5 3 orderline 7 7 2 5 3 orderline']
Expected output text: ['7 7 2 5 3 orderline']
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 13ms/step
Predicted output: [[ 3  3 12  9 11  2]]
Predicted output text: ['7 7 2 5 3 orderline']
Input: [ 3  8  3 12  6  2  3  8  3 12  6  2  3  8  3 12  6  2  8 13  4  9 10  5
 10  2  4  9 10  5 10  2  4  9 10  5 10  2  4  9 10  5 10  2  4  9 10  5
 10  2]
Input text: ['7 4 7 2 9 orderline 7 4 7 2 9 orderline 7 4 7 2 9 orderline 4 sysdatatypes 8 1 5 0 5 orderline 8 1 5 0 5 orderline 8 1 5 0 5 orderline 8 1 5 0 5 orderline 8 1 5 0 5 orderline']
Expected output text: ['8 1 5 0 5 orderline']
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 13ms/step
Predicted output: [[ 4 10  9  5  9  2]]
Predicted output text: ['8 1 5 0 5 orderline']
Input: [ 4  2  3 11  6  3  4  2  3 11  6  3  4  2  3 11  6  4  5  2  3 11  6  3
  6  2  3 10  4 10 11  2  3 10  4 10 11  2  3 10  4 10 10  2  3 10  4 10
  8  2]
Input text: ['8 orderline 7 3 9 7 8 orderline 7 3 9 7 8 orderline 7 3 9 8 0 orderline 7 3 9 7 9 orderline 7 5 8 5 3 orderline 7 5 8 5 3 orderline 7 5 8 5 5 orderline 7 5 8 5 4 orderline']
Expected output text: ['7 5 8 5 4 orderline']
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 14ms/step
Predicted output: [[3 9 4 9 8 2]]
Predicted output text: ['7 5 8 5 4 orderline']
Input: [ 8 13  8 13  8 13  8 13  3  6  5  3  3  2  3  6  5  3  3  2  3  6  5  3
  3  2  3  6  5  3  3  2  3  6  5  3  3  2  3  6  5  3  3  2  3  6  5  3
  3  2]
Input text: ['4 sysdatatypes 4 sysdatatypes 4 sysdatatypes 4 sysdatatypes 7 9 0 7 7 orderline 7 9 0 7 7 orderline 7 9 0 7 7 orderline 7 9 0 7 7 orderline 7 9 0 7 7 orderline 7 9 0 7 7 orderline 7 9 0 7 7 orderline']
Expected output text: ['7 9 0 7 7 orderline']
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 13ms/step
Predicted output: [[3 6 5 3 3 2]]
Predicted output text: ['7 9 0 7 7 orderline']
Input: [ 3  4  8  2  3  6  3  4  8  2  3  6  3  4  8  2  8 13  8 13  3 11  4  4
  4  2  3 11  4  4  4  2  3 11  4  4  4  2  3 11  4  4  4  2  3 11  4  4
  4  2]
Input text: ['7 8 4 orderline 7 9 7 8 4 orderline 7 9 7 8 4 orderline 4 sysdatatypes 4 sysdatatypes 7 3 8 8 8 orderline 7 3 8 8 8 orderline 7 3 8 8 8 orderline 7 3 8 8 8 orderline 7 3 8 8 8 orderline']
Expected output text: ['7 3 8 8 8 orderline']
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 13ms/step
Predicted output: [[ 3 11  4  4  4  2]]
Predicted output text: ['7 3 8 8 8 orderline']
69/69 ━━━━━━━━━━━━━━━━━━━━ 1s 9ms/step   
Actual Test Accuracy (n=2203): 81.89%